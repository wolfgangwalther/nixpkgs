--- a/meson.build
+++ b/meson.build
@@ -45,6 +45,8 @@ not_found_dep = dependency('', required: false)
 thread_dep = dependency('threads')
 auto_features = get_option('auto_features')
 
+disable_shared = get_option('default_library') == 'static'
+disable_static = get_option('default_library') == 'shared'
 
 
 ###############################################################
--- a/src/bin/pgevent/meson.build
+++ b/src/bin/pgevent/meson.build
@@ -20,7 +20,7 @@ if cc.get_id() == 'msvc'
   pgevent_link_args += '/ignore:4104'
 endif
 
-pgevent = shared_library('pgevent',
+pgevent = disable_shared ? disabler() : shared_library('pgevent',
   pgevent_sources,
   dependencies: [frontend_code],
   link_args: pgevent_link_args,
--- a/src/interfaces/ecpg/compatlib/meson.build
+++ b/src/interfaces/ecpg/compatlib/meson.build
@@ -16,7 +16,7 @@ if host_system == 'windows'
 endif
 
 # see src/interfaces/libpq/meson.build
-ecpg_compat_st = static_library('libecpg_compat',
+ecpg_compat_st = disable_static ? disabler() : static_library('libecpg_compat',
   ecpg_compat_sources,
   include_directories: ecpg_compat_inc,
   c_args: ecpg_compat_c_args,
@@ -24,22 +24,27 @@ ecpg_compat_st = static_library('libecpg_compat',
   link_with: [ecpglib_st, ecpg_pgtypes_st],
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpg_compat_st
+if ecpg_compat_st.found()
+  ecpg_targets += ecpg_compat_st
+endif
 
-ecpg_compat_so = shared_library('libecpg_compat',
+ecpg_compat_soversion = host_system != 'windows' ? '3' : ''
+ecpg_compat_so = disable_shared ? disabler() : shared_library('libecpg_compat',
   ecpg_compat_sources + ecpg_compat_so_sources,
   include_directories: ecpg_compat_inc,
   c_args: ecpg_compat_c_args,
   dependencies: [frontend_shlib_code, thread_dep],
   link_with: [ecpglib_so, ecpg_pgtypes_so],
-  soversion: host_system != 'windows' ? '3' : '',
+  soversion: ecpg_compat_soversion,
   darwin_versions: ['3', '3.' + pg_version_major.to_string()],
   version: '3.' + pg_version_major.to_string(),
   link_args: export_fmt.format(export_file.full_path()),
   link_depends: export_file,
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpg_compat_so
+if ecpg_compat_so.found()
+  ecpg_targets += ecpg_compat_so
+endif
 
 pkgconfig.generate(
   name: 'libecpg_compat',
--- a/src/interfaces/ecpg/ecpglib/meson.build
+++ b/src/interfaces/ecpg/ecpglib/meson.build
@@ -25,7 +25,7 @@ if host_system == 'windows'
 endif
 
 # see src/interfaces/libpq/meson.build
-ecpglib_st = static_library('libecpg',
+ecpglib_st = disable_static ? disabler() : static_library('libecpg',
   ecpglib_sources,
   include_directories: ecpglib_inc,
   c_args: ecpglib_c_args,
@@ -34,23 +34,28 @@ ecpglib_st = static_library('libecpg',
   link_with: [ecpg_pgtypes_st],
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpglib_st
+if ecpglib_st.found()
+  ecpg_targets += ecpglib_st
+endif
 
-ecpglib_so = shared_library('libecpg',
+ecpglib_soversion = host_system != 'windows' ? '6' : ''
+ecpglib_so = disable_shared ? disabler() : shared_library('libecpg',
   ecpglib_sources + ecpglib_so_sources,
   include_directories: ecpglib_inc,
   c_args: ecpglib_c_args,
   c_pch: pch_postgres_fe_h,
   dependencies: [frontend_shlib_code, libpq, thread_dep],
   link_with: ecpg_pgtypes_so,
-  soversion: host_system != 'windows' ? '6' : '',
+  soversion: ecpglib_soversion,
   darwin_versions: ['6', '6.' + pg_version_major.to_string()],
   version: '6.' + pg_version_major.to_string(),
   link_args: export_fmt.format(export_file.full_path()),
   link_depends: export_file,
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpglib_so
+if ecpglib_so.found()
+  ecpg_targets += ecpglib_so
+endif
 
 pkgconfig.generate(
   name: 'libecpg',
--- a/src/interfaces/ecpg/pgtypeslib/meson.build
+++ b/src/interfaces/ecpg/pgtypeslib/meson.build
@@ -21,7 +21,7 @@ if host_system == 'windows'
 endif
 
 # see src/interfaces/libpq/meson.build
-ecpg_pgtypes_st = static_library('libpgtypes',
+ecpg_pgtypes_st = disable_static ? disabler() : static_library('libpgtypes',
   ecpg_pgtypes_sources,
   include_directories: ecpg_pgtypes_inc,
   c_args: ecpg_pgtypes_c_args,
@@ -29,22 +29,27 @@ ecpg_pgtypes_st = static_library('libpgtypes',
   dependencies: frontend_stlib_code,
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpg_pgtypes_st
+if ecpg_pgtypes_st.found()
+  ecpg_targets += ecpg_pgtypes_st
+endif
 
-ecpg_pgtypes_so = shared_library('libpgtypes',
+ecpg_pgtypes_soversion = host_system != 'windows' ? '3' : ''
+ecpg_pgtypes_so = disable_shared ? disabler() : shared_library('libpgtypes',
   ecpg_pgtypes_sources + ecpg_pgtypes_so_sources,
   include_directories: ecpg_pgtypes_inc,
   c_args: ecpg_pgtypes_c_args,
   c_pch: pch_postgres_fe_h,
   dependencies: frontend_shlib_code,
   version: '3.' + pg_version_major.to_string(),
-  soversion: host_system != 'windows' ? '3' : '',
+  soversion: ecpg_pgtypes_soversion,
   darwin_versions: ['3', '3.' + pg_version_major.to_string()],
   link_args: export_fmt.format(export_file.full_path()),
   link_depends: export_file,
   kwargs: default_lib_args,
 )
-ecpg_targets += ecpg_pgtypes_so
+if ecpg_pgtypes_so.found()
+  ecpg_targets += ecpg_pgtypes_so
+endif
 
 pkgconfig.generate(
   name: 'libpgtypes',
--- a/src/interfaces/libpq/meson.build
+++ b/src/interfaces/libpq/meson.build
@@ -56,7 +56,8 @@ libpq_c_args = ['-DSO_MAJOR_VERSION=5']
 # more complexity than its worth (AIX doesn't support link_whole yet, reusing
 # object files requires also linking to the library on windows or breaks
 # precompiled headers).
-libpq_st = static_library('libpq',
+
+libpq_st = disable_static ? disabler() : static_library('libpq',
   libpq_sources,
   include_directories: [libpq_inc],
   c_args: libpq_c_args,
@@ -65,13 +66,14 @@ libpq_st = static_library('libpq',
   kwargs: default_lib_args,
 )
 
-libpq_so = shared_library('libpq',
+libpq_soversion = host_system != 'windows' ? '5' : ''
+libpq_so = disable_shared ? disabler() : shared_library('libpq',
   libpq_sources + libpq_so_sources,
   include_directories: [libpq_inc, postgres_inc],
   c_args: libpq_c_args,
   c_pch: pch_postgres_fe_h,
   version: '5.' + pg_version_major.to_string(),
-  soversion: host_system != 'windows' ? '5' : '',
+  soversion: libpq_soversion,
   darwin_versions: ['5', '5.' + pg_version_major.to_string()],
   dependencies: [frontend_shlib_code, libpq_deps],
   link_depends: export_file,
@@ -80,7 +82,7 @@ libpq_so = shared_library('libpq',
 )
 
 libpq = declare_dependency(
-  link_with: [libpq_so],
+  link_with: [disable_shared ? libpq_st : libpq_so],
   include_directories: [include_directories('.')]
 )
